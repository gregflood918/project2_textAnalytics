
# -*- coding: utf-8 -*-
"""
Created on Wed Apr 19 19:58:26 2017

@author: gregflood918
"""

import os
import json
import nltk
import pickle
import pandas as pd
import nltk

'''
for name, values in df.iteritems():
    print '{name}: {value}'.format(name=name, value=values[0])
    '''
    
    
class project_two():
    def __init__(self):
        self.food_json = pd.read_json("yummly.json")
        self.uniq_ingredients = self.get_unique_ingredients()
        self.feature_set = self.create_feature_set()

#First step, create a list of ALL words!!!


    def get_unique_ingredients(self):
        all_ingredients = set()
        for recipe in self.food_json['ingredients']:
            for food in recipe:
                all_ingredients.add(food.lower())
        
        all_ingredients = sorted(list(all_ingredients))    
        return all_ingredients
    
             
    #Function that accepts a recipe (as an array) and returns a feature
    #dictionary.  Each word represents a key and the value will be true or
    #false depending on the presence or absence of the ingredient in the
    #passed recipe.  Length of returned dicitonary will be equivalent to
    #the number of unique ingredients.
    def make_features(doc,self):
        doc = [j.lower() for j in doc] #consistent lower case
        ingredients = set(doc)   
        features = {}
        for food in self.uniq_ingredients:
            features[food] = (food in ingredients) #True if recipe has food
        return features    
    
        
    def create_feature_set(self):
        _featureSet = []
        for index,row in self.food_json.iterrows():
            _featureSet.append((self.make_features(row['ingredients']),row['cuisine']))
        return _featureSet
    
    
#Function that will train a Naive Bayes classifier using the yummly.json
#file and save the trained classifier as a .pickle file.  If a .pickle file
#exists in the current working directory with the specified name, no classifer
#will be trained. Otherwise, a new .pickle file will be saved contain the
#classifier.  Note that the FULL data set is being used, as
def train_bayes():
    if os.path.isfile("naive_bayes.pickle"):
        print("Model has already been trained")
        return
    #Create featureset and perform basic train/test    
    featureSet = []
    for index,row in food_json.iterrows():
        featureSet.append((make_features(row['ingredients']),row['cuisine']))
    trainSet = featureSet[:1000]
    testSet = featureSet[1000:1200]
    classifier = nltk.NaiveBayesClassifier.train(trainSet)
    print("Train/accuracy using first 1200 observations: "+
          str(nltk.classify.accuracy(classifier,testSet)) + "\n")
    print("Training full dataset . . .")
    classifier = nltk.NaiveBayesClassifier.train(featureSet)
    save_classifer = open("naive_bayes.pickle","wb")
    pickle_dump(classifier,save_classifier)
    save_classifier.close()
    return
    
    
    
    '''
    
featureSet = []
for index,row in food_json.iterrows():
    featureSet.append((make_features(row['ingredients']),row['cuisine']))
        
trainSet = featureSet[:4000]
testSet = featureSet[4000:]
classifier = nltk.NaiveBayesClassifier.train(trainSet)
print(nltk.classify.accuracy(classifier,testSet))
            '''  